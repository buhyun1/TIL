/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-06-23 16:40:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import java.io.*;
import java.sql.*;

public final class sample_005fmanagement_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

    String uploadFolder = this.getServletContext().getInitParameter("uploadFolder");
    String uploadPath = this.getServletContext().getRealPath(uploadFolder);
    
    String userID = request.getParameter("userid");
    String password = request.getParameter("pw");
    
    Cookie[] c = request.getCookies();
    String UserID="";
    
    String driverName = "org.mariadb.jdbc.Driver";
    String dbName = "manager";
    String dbName2 = "fileservice";
    String driverURL = "jdbc:mariadb://localhost:3306/" + dbName;
    String driverURL2 = "jdbc:mariadb://localhost:3306/" + dbName2;
    String dbusername = "root";
    String dbpassword = "secret";
    String dbname=null;
    String dbpw=null;
    String fileName = null;
    try (Connection conn = DriverManager.getConnection(driverURL, dbusername, dbpassword);
            Statement state = conn.createStatement();) {
        // pw.println("driverURL: " + driverURL + ", connected!<br>");
        String sql = "select username, password from manager";
        ResultSet rs = state.executeQuery(sql);
        rs.next();
        dbname = rs.getString(1);
        dbpw = rs.getString(2);
        // pw.println(dbname);
        // pw.println(dbpw);
        rs.close();
        state.close();
        conn.close();
    } catch (SQLException e) {
        //pw.println("Invalid SQL: check SQL");
        e.printStackTrace();
    }
    // 관리자 계정 확인 후 파일 목록 리스트 업
    if (userID.equals(dbname) & password.equals(dbpw)) {
        File file= new File(uploadPath+"\\"+UserID);
        out.println("<div style=\"width:400px;\" align=\"center\"> \r\n"
                + "  <strong><ins>파일 목록</ins></strong><br><br>\r\n"
                + "</div>\r\n"
                + "\r\n"
                + "<form action=\"deleteFiles.jsp\" method=\"post\">\r\n"
                + "  <fieldset style=\"width:400px\">\r\n"
                + "    <legend>List of uploaded files</legend>"
                );
        for(String s: file.list()){
             out.println("<input type=\"checkbox\" id="+s+" name="+s+" value="+s+">\r\n"
                     + " <label for="+s+">"+s+"</label><br>");
             fileName = s;
                    		 
             try (Connection conn = DriverManager.getConnection(driverURL2, dbusername, dbpassword);
                     Statement state = conn.createStatement();) {
                    String deleteSql = "DELETE FROM filelist WHERE pass_code = '" + fileName + "'";
                    System.out.print(deleteSql);
                    int rowsAffected = state.executeUpdate(deleteSql);
                    if (rowsAffected > 0) {
                        System.out.println("파일 이름 '" + fileName + "'을(를) 데이터베이스에서 삭제했습니다.");
                    } else {
                        System.out.println("파일 이름 '" + fileName + "'을(를) 데이터베이스에서 삭제하는데 실패했습니다.");
                    }
                    state.close();
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }

        }
        out.print("<hr>\r\n"
                + "    <div style=\"width:400px;\" align=\"right\"> \r\n"
                + "      <input type=\"submit\" value=\"Delete\">&nbsp;&nbsp;\r\n"
                + "      <input type=\"reset\" value=\"Reset\">\r\n"
                + "    </div>   \r\n"
                + "  </fieldset><br>  \r\n"
                		+ "  <input type=\"hidden\" name=\"userid\" value=\"" + userID + "\"/>" 
                        + "  <input type=\"hidden\" name=\"pw\" value=\"" + password + "\"/>" 
                        
                + "</form>\r\n"
                + "<br>\r\n");
        
    }

        /**
        try (Connection conn = DriverManager.getConnection(driverURL2, dbusername, dbpassword);
                Statement state = conn.createStatement();)
        {
            String sql = "DELETE FROM filelist WHERE pass_code = ?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, pass_code);
            ResultSet rs = state.executeQuery(sql);
            rs.next();
            System.out.print("hhi");
            rs.close();
            state.close();
            conn.close();
            

    }catch (SQLException e) {
        //pw.println("Invalid SQL: check SQL");
        e.printStackTrace();
    } 
        **/



    
        
    /**
      if (c != null) {
          
          for(int i = 0; i < c.length; i++) {
              //Cookie중 LoginOK 쿠키가 있는 경우에만 진행
              if(c[i].getName().equals("LoginOK")){
                  out.println(" >> Total Cookies (found at the server): " + c.length + "<br>");
                  String message = null;
                  
              message = String.format("[%d] %s= %s", i, c[i].getName(), c[i].getValue());
              //UserID변수에 Cookie에 들어있는 ID저장
              UserID=c[i].getValue();
              System.out.println(message);

              }
              
          }
          }
    **/ 
  
          /*  + "<form action=\"fileUpload.jsp\" method=\"post\" enctype=\"multipart/form-data\">\r\n"
           + "  <fieldset style=\"width:400px\">\r\n"
           + "    <legend>Upload a new file:</legend>\r\n"
           + "    <label for=\"upfile\"><small>Choose Files:</small></label><br>\r\n"
           + "    <input type=\"file\" name=\"upfile\" id=\"upfile\" multiple/><br>\r\n"
           + "    <hr>\r\n"
           + "    <div style=\"width:400px;\" align=\"right\"> \r\n"
           + "      <input type=\"submit\" value=\"Upload\">&nbsp;&nbsp;\r\n"
           + "      <input type=\"reset\" value=\"Clear\">\r\n"
           + "    </div> \r\n"
           + "  </fieldset>\r\n"
           + "</form>"); */
    
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
