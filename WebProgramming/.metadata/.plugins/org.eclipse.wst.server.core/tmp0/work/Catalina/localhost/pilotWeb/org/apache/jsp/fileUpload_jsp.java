/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-05-04 06:58:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.File;
import java.util.*;

public final class fileUpload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>uploaded files</h2>\r\n");
      out.write("	");

	String uploadFolder = this.getServletContext().getInitParameter("uploadFolder");
	String uploadPath = this.getServletContext().getRealPath(uploadFolder);
	Random random = new Random();
	//Cookie를 통해 로그인 한 유저 Email 받아오기
	Cookie[] c = request.getCookies();
	String UserID = "";
	if (c != null) {
		for (int i = 0; i < c.length; i++) {
			//Cookie중 LoginOK 쿠키가 있는 경우에만 진행
			if (c[i].getName().equals("LoginOK")) {
		//UserID변수에 Cookie에 들어있는 ID저장
		UserID = c[i].getValue();
		System.out.println("Logined User:" + UserID);
			}

		}
	}

	for (Part part : request.getParts()) {
		//File filenames ="";
		if ("upfile".equals(part.getName())) {

			String fileName = part.getSubmittedFileName();
			int dot = fileName.lastIndexOf(".");
			System.out.println("index" + dot);
			String newName = uploadPath + UserID + "\\" + fileName.substring(0, dot) + "_New" + fileName.substring(dot);
			System.out.println(newName);

			File file = new File(uploadPath + UserID + "\\" + fileName);
			System.out.println(uploadPath + UserID + "\\" + fileName);
			//Upload한 파일과 같은 이름의 파일이 있는지 확인
			if (file.exists()) {
		File exists = new File(newName);
		//File random = new File()

		// _new가 붙은 이름의 파일이 있는지 확인

		if (exists.exists()) {
			int number = random.nextInt(100); // random값은 0~100사이로 지정한다.
			File IsSameNumber = new File(uploadPath + UserID + "\\" + fileName.substring(0, dot) + "_New_" + number
					+ fileName.substring(dot));
			//난수가 붙은 파일명도 동일한 경우 다음 파일로 넘어간다.
			if (IsSameNumber.exists()) {
				continue;
			}
			// 아닌 경우 난수가 붙은 파일을 저장
			else {
				part.write(uploadPath + UserID + "\\" + fileName.substring(0, dot) + "_New_" + number
						+ fileName.substring(dot));
				//파일 명이 변경되어 저장되는 경우 해당 파일명으로 출력시킨다.
				out.println("<li>File: " + fileName.substring(0, dot) + "_New_" + number + fileName.substring(dot)
						+ " uploaded.</li><br>");

			}
		}

		else {
			part.write(newName);
			System.out.println("file Uploaded" + newName);

			out.println("<li>File: " + fileName.substring(0, dot) + "_New" + fileName.substring(dot)
					+ " uploaded.</li><br>");

		}

			}
			part.write(uploadPath + UserID + "\\" + fileName);

			out.println("<li>File: " + fileName + " uploaded.</li><br>");

		}

	}
	out.println("</ul>");
	
      out.write("\r\n");
      out.write("	Goto:\r\n");
      out.write("	<a href=\"sample_management.jsp\">File Upload Management</a>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
