/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-06-15 07:54:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.*;
import java.util.*;
import jakarta.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.*;
import site.manage.*;

public final class receiveFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("site.manage");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("jakarta.servlet.http.HttpServletResponse");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

	String UploadFolder = this.getServletContext().getInitParameter("uploadFolder");
	String UploadFolderPath = this.getServletContext().getRealPath(UploadFolder);
	//System.out.println(UploadFolderPath);
	Enumeration<String> params = request.getParameterNames();

	String FileName = "";
	String pass_code = request.getParameter("pass_code");

	File userFolder = new File(UploadFolderPath + "\\" + pass_code);

	long currentTime = System.currentTimeMillis();
	long CreationTime = userFolder.lastModified();

	boolean isCodeSame = false;
	//PASS_CODE 일치 여부 확인
	Connection conn = DBConnectionContextListener.getDBConnection();

	try {
		String sql = "select count(*) from filelist where pass_code = ?";
		String sqlTime = "select upload_time from filelist where pass_code = ?";

		PreparedStatement psm = conn.prepareStatement(sql);
		PreparedStatement psmTime = conn.prepareStatement(sqlTime);
		psmTime.setString(1, pass_code);
		psm.setString(1, pass_code);

		ResultSet resultSet = psm.executeQuery();

		// 결과 처리
		resultSet.next(); // Count(*) 이므로 next를 통해 행의 값을 얻을 수 있다.
		int count = resultSet.getInt(1); // 얘는 행의 첫번째 열의 값 여기서는 갯수를 얻을 수 있다.
		//pass_code가 일치한다.
		if (count > 0) {
			ResultSet resultSetTime = psmTime.executeQuery();
			resultSetTime.next();
			Timestamp timestamp = resultSetTime.getTimestamp("upload_time");
			CreationTime = timestamp.getTime();
			isCodeSame = true;
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}

	long timeDifference = (currentTime - CreationTime) / 1000 / 60;

	if (isCodeSame && timeDifference <5) {
		File[] files = userFolder.listFiles();
		String Firstfile = files[0].getName();
		File userFolderFile = new File(userFolder + "\\" + Firstfile);

		//바로 파일 다운로드 위한 코드
		response.setContentType("application/octet-stream");
		response.setHeader("Content-Disposition", "attachment; filename=\"" + Firstfile + "\"");

		// 입력 스트림 및 출력 스트림 생성
		InputStream inputStream = new FileInputStream(userFolderFile);
		OutputStream outputStream = response.getOutputStream();

		// 입력 스트림에서 읽은 데이터를 출력 스트림으로 전송
		byte[] buffer = new byte[4096];
		int bytesRead;
		while ((bytesRead = inputStream.read(buffer)) != -1) {
			outputStream.write(buffer, 0, bytesRead);
		}

		// 스트림 닫기
		inputStream.close();
		outputStream.close();

		//out.println("<html>");
		//out.println("<body>");
		//out.println("<div style=\"width: 400px;\" align=\"center\">");
		//out.println("<strong><ins>Download File</ins></strong><br> <br>");
		//out.println("</div>");
		//out.println(
		//"다운 받기: [<a href= " + "upload\\" + pass_code + "\\" + Firstfile + " download>" + Firstfile + "</a>]\r\n");
		//out.println("</body>");
		//out.println("</html>");

		// TxRequest 쿠키 삭제
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
		if (cookie.getName().equals("TxRequest")) {
			cookie.setMaxAge(0);
			response.addCookie(cookie);
		}
			}
		}

		// 폴더 삭제
		if (userFolder.exists()) {
			File[] files1 = userFolder.listFiles();
			if (files1 != null) {
		for (File file : files1) {
			file.delete(); // 폴더 내 파일 삭제
		}
			}
			userFolder.delete(); // 폴더 삭제
		}
		//DB에서 삭제
		try {
			String sql = "DELETE FROM filelist WHERE pass_code = ?";
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, pass_code);
			int rowsAffected = statement.executeUpdate();
			if (rowsAffected > 0) {
				System.out.println(pass_code+"행이 삭제되었습니다.");
			} else {
				System.out.println(pass_code+"와"+"일치하는 행이 없습니다.");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			DBConnectionContextListener.returnDBConnection(conn);
		}

	} else {
		out.println("<html>");
		out.println("<body>");
		out.println("<div style=\"width: 400px;\" align=\"center\">");
		out.println(" <strong><ins>Download Error</ins></strong><br><br>");
		out.println("</div>");
		out.println("그런 파일이 없거나, 제한시간 5분이 경과하였습니다.");
		out.println("</body>");
		out.println("</html>");
		//뒤로 돌아가는 버튼 UI추가
		out.println("<br><a href=\"receiveFile.html\">뒤로 돌아가기</a>");

	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
