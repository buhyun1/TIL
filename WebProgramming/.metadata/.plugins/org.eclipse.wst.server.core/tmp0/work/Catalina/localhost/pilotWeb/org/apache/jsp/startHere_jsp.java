/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-04-26 00:30:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class startHere_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Start Page</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("  function setCookieSectionMessage(message) {\r\n");
      out.write("    let output = document.getElementById('cookieSection');\r\n");
      out.write("    output.textContent = message;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  function showAllCookies() {\r\n");
      out.write("    setCookieSectionMessage(\"cookies: \" + document.cookie);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function clearAllCookies() {\r\n");
      out.write("    const cookies = document.cookie.split('; ');\r\n");
      out.write("    let pair;\r\n");
      out.write("    for (let i = 0; i < cookies.length; i++) {\r\n");
      out.write("      pair = cookies[i].split(\"=\");\r\n");
      out.write("      document.cookie = pair[0] + \"= ; Expires= Thu, 01 Jan 1970 00:00:00 GMT\";\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    setCookieSectionMessage('');\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  function findCookieValue(name) {\r\n");
      out.write("    const value = document.cookie.split('; ')\r\n");
      out.write("      .find(pair => pair.startsWith(name + '='))\r\n");
      out.write("      .split('=')[1];\r\n");
      out.write("    \r\n");
      out.write("    return value;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var _popup_window = null;\r\n");
      out.write("  function openVisitPopup(url, windowName) {\r\n");
      out.write("    if (_popup_window == null || _popup_window.closed) {\r\n");
      out.write("      _popup_window = window.open(url, windowName, \"width=300,height=200,left=200,top=200,menubar=no\");\r\n");
      out.write("    } else {\r\n");
      out.write("      _popup_window.focus();\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>Main shopping page</h1>\r\n");
      out.write("\r\n");
      out.write("<a href=\"showBasket.jsp\">Goto Basket</a><br><br>\r\n");
      out.write("\r\n");
      out.write("<button onclick=\"showAllCookies()\">Show all cookies</button>&nbsp&nbsp\r\n");
      out.write("<button onclick=\"clearAllCookies()\">Clear all cookies</button>\r\n");
      out.write("\r\n");
      out.write("<div><code id=\"cookieSection\"></code></div>\r\n");

  java.util.Random rand = new java.util.Random();
  Cookie secretCookie = new Cookie("secret", "" + rand.nextInt());
  secretCookie.setHttpOnly(true);
  response.addCookie(secretCookie);
  Cookie visitCookie = null;
  out.println("<hr>");
  Cookie[] c = request.getCookies();

  if (c != null) {
    out.println(" >> Total Cookies (found at the server): " + c.length + "<br>");


    String message = null;  
    for(int i = 0; i < c.length; i++) {
      message = String.format("[%d] %s= %s", i, c[i].getName(), c[i].getValue());
      out.println("<br>" + message);

      if ("visit".equalsIgnoreCase(c[i].getName()))
        visitCookie = c[i];
    }
    out.println("<hr>");
  }
  
  if (visitCookie == null) {
    visitCookie = new Cookie("visit", "1");
  } else {
    int counter = Integer.parseInt(visitCookie.getValue()) + 1;
    visitCookie.setValue("" + counter);
  }
  out.println("cookie for visit is set to " + visitCookie.getValue() + ".<br>");
  
  response.addCookie(visitCookie);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("  document.cookie = 'test=ok; SameSite=None; Secure';\r\n");
      out.write("  \r\n");
      out.write("  var visit = findCookieValue('visit');\r\n");
      out.write("  if (visit == 1) {\r\n");
      out.write("    openVisitPopup('', '_welcome_first_visit');\r\n");
      out.write("    _popup_window.document.write(\"<h3>Welcome your first visit!</h3>\");\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- // ì­ì í  ì¿ í¤ì ì´ë¦ì ì¤ì í©ëë¤.\r\n");
      out.write("String cookieName = \"ì¿ í¤ ì´ë¦\";\r\n");
      out.write("\r\n");
      out.write("// ì¿ í¤ ìì±\r\n");
      out.write("Cookie cookie = new Cookie(cookieName, null);\r\n");
      out.write("cookie.setMaxAge(0);\r\n");
      out.write("\r\n");
      out.write("// ìëµ í¤ëì ì¿ í¤ë¥¼ ì¶ê°íì¬ ì­ì í©ëë¤.\r\n");
      out.write("response.addCookie(cookie); -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
