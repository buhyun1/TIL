# Binary Classification : pain
logistic <- read.csv("https://www.dropbox.com/s/68nc2w3xw6ajf8a/logistic.csv?dl=1", header=F, col.names=c("Treatment", "Age", "Duration", "Gender", "Pain"))
logistic$Gender <- as.factor(logistic$Gender)
logistic$Pain <- as.factor(logistic$Pain)
gl <- glm(Pain ~ ., data=logistic, family=binomial())
summary(gl)
# predict
gl.pred <- predict(gl, newdata=logistic, type="response")
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(0,1))
gl.pred.tran
View(logistic)
gl.pred
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
# Binary Classification : pain
logistic <- read.csv("https://www.dropbox.com/s/68nc2w3xw6ajf8a/logistic.csv?dl=1", header=F, col.names=c("Treatment", "Age", "Duration", "Gender", "Pain"))
logistic$Gender <- as.factor(logistic$Gender)
logistic$Pain <- as.factor(logistic$Pain)
gl <- glm(Pain ~ ., data=logistic, family=binomial())
summary(gl)
# predict
gl.pred <- predict(gl, newdata=logistic, type="response")
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred < 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
>
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(1,0))
gl.pred.tran <- factor(gl.pred < 0.5, levels=c(T, F), labels=c(1,0))
# predict
gl.pred <- predict(gl, newdata=logistic, type="response")
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(0,1))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred < 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran
View(gl)
summary(gl)
gl
# Binary Classification : pain
logistic <- read.csv("https://www.dropbox.com/s/68nc2w3xw6ajf8a/logistic.csv?dl=1", header=F, col.names=c("Treatment", "Age", "Duration", "Gender", "Pain"))
View(logistic)
gl.pred.tran
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
# Binary Classification : pain
logistic <- read.csv("https://www.dropbox.com/s/68nc2w3xw6ajf8a/logistic.csv?dl=1", header=F, col.names=c("Treatment", "Age", "Duration", "Gender", "Pain"))
logistic$Gender <- as.factor(logistic$Gender)
logistic$Pain <- as.factor(logistic$Pain)
gl <- glm(Pain ~ ., data=logistic, family=binomial())
summary(gl)
# predict
gl.pred <- predict(gl, newdata=logistic, type="response")
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
F
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(0,1))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(T, F), labels=c(0,1))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(0,1))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred
gl.pred.tran <- factor(gl.pred < 0.5, levels=c(F, T), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
gl.pred.tran <- factor(gl.pred > 0.5, levels=c(F, T), labels=c(1,0))
# performance measure (self)
library(caret, warn.conflicts=F)
confusionMatrix(gl.pred.tran, logistic$Pain)
